---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyterhub-config
data:
  config: |-
    import socket
    import os

    # Basic JupyterHub config
    c.JupyterHub.ip = '0.0.0.0'
    c.JupyterHub.port = 8000
    c.JupyterHub.spawner_class = 'kubespawner.KubeSpawner'
    c.JupyterHub.cleanup_servers = False
    c.JupyterHub.hub_ip = '0.0.0.0'
    c.JupyterHub.hub_port = 8081
    # Find our IP
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    s.connect(("8.8.8.8", 80))
    host_ip = s.getsockname()[0]
    s.close()

    # Authenticator config
    def add_user(self, user):
        print("Adding user: user {} being added".format(user))
        os.system('ssh jupyter-k8s-admin.cs.aalto.fi "hostname ; echo adding user {} ; /root/jupyterhub/scripts/adduser.py"'.format(user))
    c.Authenticator.add_user = add_user

    # Spawner config
    c.KubeSpawner.start_timeout = 60 * 5
    c.KubeSpawner.singleuser_image_spec = 'nbgrader-mlbp'
    c.KubeSpawner.hub_connect_ip = host_ip
    c.JupyterHub.hub_connect_ip = c.KubeSpawner.hub_connect_ip
    c.KubeSpawner.hub_connect_port = 80
    c.KubeSpawner.http_timeout = 60 * 5
    # Volume mounts
    c.KubeSpawner.volumes = [ { "name": "notebook", "nfs": { "server": "jupyter-k8s-admin.cs.aalto.fi", "path": "/srv/jupyter-tw/user/{username}" } } ]
    c.KubeSpawner.volume_mounts = [ { "mountPath": "/notebooks", "name": "notebook" } ]
    c.KubeSpawner.singleuser_working_dir = '/notebooks'

    c.KubeSpawner.profile_list = [
        'display_name': 'MLBP 2018',
        'kubespawner_override': {
            # if callable is here, set spawner.k = v(spawner)
            #'image_spec': 'training/python:label',
            #'cpu_limit': 1,
            #'mem_limit': '512M',
            'course_slug': 'mlbp2018',
        }
    ]

    # profile_list --> use this instead of ProfileSpawner ?
    def pre_spawn_hook(spawner):
        course = self.course_slug
        self.uid = 1000
        #self.gid = xxx
        #storage_capacity = ???
        # For instructors
        #supplemental_gids = xxx  # course instructors
    c.KubeSpawner.pre_spawn_hook = pre_spawn_hook


    # Culler service
    c.JupyterHub.services = [
      {
        'name': 'cull-idle',
        'admin': True,
        'command': 'python3 /cull_idle_servers.py --timeout=300 --cull_every=150'.split(),
      }
    ]

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jupyterhub
  labels:
    app: jupyterhub
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jupyterhub
  template:
    metadata:
      labels:
        app: jupyterhub
    spec:
      containers:
      - name: jupyterhub
        image: jupyterhub-cs
        ports:
        - containerPort: 8000
        volumeMounts:
        - name: jupyterhub-config
          mountPath: /srv/jupyterhub/jupyterhub_config.py
          subPath: config
        imagePullPolicy: Never
      tolerations:
      - key: jupyterhub
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: jupyterhub-config
        configMap:
          name: jupyterhub-config
      nodeSelector:
        app: jupyterhub
      serviceAccountName: jupyter-notebook-spawner
